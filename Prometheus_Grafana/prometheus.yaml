# This is not a recommended configuration, and further support should be available
# from the Prometheus and Grafana communities.  The main purpose of this file is to
# provide a Prometheus server configuration that is compatible with the Interconnect
# Grafana dashboards.

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: amq76

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: prometheus
    spec:
      serviceAccount: prometheus-server
      containers:
      - name: prometheus
        image: prom/prometheus:v2.4.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: prometheus
          containerPort: 9090
          protocol: TCP
        volumeMounts:
        - mountPath: /prometheus
          name: prometheus-data
        - mountPath: /etc/prometheus
          name: prometheus-config
        resources:
          requests:
            cpu: "1"
            memory: 1Gi
          limits:
            cpu: "1"
            memory: 1Gi
      volumes:
        - name: prometheus-data
          emptyDir: {}
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: alerting-rules
          configMap:
            name: alerting-rules

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_name]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_namespace]
          regex: myproject
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
    rule_files:
    - /etc/config/alerting-rules/*.yml
    scrape_configs:
    - job_name: 'broker-metrics'
      honor_labels: true
      scrape_interval: 10s
      scrape_timeout: 10s
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - api_server: null
        # scrape all exposed ports on all pods, except where limited below
        role: pod
        namespaces:
          names: []
      relabel_configs:
      # only scrape pods that have an attribute of prometheus.io/scrape: 'true'
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        separator: ;
        regex: "true"
        replacement: $1
        action: keep
      # don't attempt to scrape all ports that are exposed by the pod. Just scape 
      # the port defined in the attribute prometheus.io.port (which will be '8080')
      - source_labels: [__meta_kubernetes_pod_label_address, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
  - name: prometheus
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    name: prometheus
  type: ClusterIP
